role = "target_child",
token = all.words)
View(data)
data <- data %>%
mutate(word = gloss,
type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id))
View(data)
library(lme4)
model <- glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
data <- data %>%
mutate(word = gloss,
type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1:3))
data <- data %>%
mutate(word = gloss,
type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1, 3))
View(data)
data <- data %>%
mutate(word = tolower(gloss),
type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1, 3))
unique(data$word)
raw.data <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = all.words)
data <- raw.data %>%
mutate(word = tolower(gloss),
type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1, 3))
View(data)
unique(data$word)
data <- raw.data %>%
# remove incorrected word catches
filter(!(word %in% c("fat", "truck", "mother", "pick"))) %>%
mutate(word = tolower(gloss),
type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1, 3)) %>%
filter(age < 60)
data <- raw.data %>%
# remove incorrected word catches
filter(!(word %in% c("fat", "truck", "mother", "pick")))
data <- raw.data %>%
mutate(word = tolower(gloss)) %>%
# remove incorrected word catches
filter(!(word %in% c("fat", "truck", "mother", "pick"))) %>%
mutate(type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1, 3)) %>%
filter(age < 60)
View(data)
unique(data$stem)
library(lme4)
model <- glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
utils::install.packages("lme4", type = "source")
library(lme4)
model <- glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
utils::install.packages("Matrix")
library(lme4)
model <- glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
remove.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(lme4)
model <- glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
#| results: hide
#| warning: false
#| message: false
# uncomment the following line if devtools not already installed
# install.packages("devtools")
# install the latest version of the package from github
devtools::install_github("langcog/childesr")
library(childesr)
# install other packages
library(tidyverse)
library(kableExtra)
get_corpora() %>%
kable(align = "l") %>%
scroll_box(height = "250px")
eng.corpora <- get_corpora() %>%
filter(collection_name == "Eng-NA")
eng.corpora %>%
kable(align = "l") %>%
scroll_box(height = "250px")
transcript.count <- get_transcripts(collection = "Eng-NA") %>%
nrow()
child.count <- get_participants(role = "target_child",
collection = "Eng-NA") %>%
nrow()
naima.utterances <- get_utterances(collection = "Eng-NA",
corpus = "Providence",
target_child = "Naima")
naima.utterances %>%
slice_head(n = 1000) %>%
kable(align = "l") %>%
scroll_box(height = "250px")
eddie.utterances <- get_utterances(collection = "Eng-NA",
corpus = "Gleason",
target_child = "Eddie")
eddie.utterances %>%
slice_head(n = 1000) %>%
kable(align = "l") %>%
scroll_box(height = "250px")
get_speaker_statistics(corpus = c("Providence", "Gleason"),
target_child = c("Naima", "Eddie"),
role = "target_child") %>%
group_by(target_child_name, target_child_sex) %>%
summarize(Age = mean(target_child_age, na.rm = TRUE),
`Number of utterances` = mean(num_utterances, na.rm = TRUE),
`Length of utterances (in words)` = mean(mlu_w, na.rm = TRUE),
`Number of unique words` = mean(num_types, na.rm = TRUE)) %>%
kable(align = "l")
sample.word.frequencies <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = c("apple", "ball", "car", "dog", "egg"))
sample.word.frequencies %>%
kable(align = "l") %>%
scroll_box(height = "250px")
sample.word.frequencies <- sample.word.frequencies %>%
mutate(word = tolower(gloss)) %>%
filter(word %in% c("apple", "ball", "car", "dog", "egg"))
sample.word.frequencies %>%
group_by(word) %>%
summarize(frequency = n()) %>%
kable(align = "l") %>%
scroll_box(height = "250px")
#| fig-width: 10
#| fig-height: 7
sample.word.frequencies %>%
mutate(age = floor(target_child_age)) %>%
filter(age <= 48) %>%
group_by(word, age) %>%
summarize(frequency = n()) %>%
filter(frequency > 10) %>%
ggplot(aes(x = age, y = frequency, color = word)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Age (in months)", y = "Word frequency",
color = "Target word") +
theme_minimal()
# create list of child-directed words
c.words <- c("doggy", "birdy", "dolly", "horsy", "ducky",
"froggy", "piggy", "blanky", "mommy", "daddy")
# account for alternative spellings and plurals/possessives
c.extra.variations <- c(str_replace(c.words, "y", "ie"),
str_replace(c.words, "y", "ys"),
str_replace(c.words, "y", "ies"))
# create list of adult-directed words
a.words <- c("dog", "bird", "doll", "horse", "duck",
"frog", "pig", "blanket", "mom", "dad")
all.words <- c(c.words, c.extra.variations, a.words)
all.tokens <- sample.word.frequencies <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = c("apple", "ball", "car", "dog", "egg"))
raw.data <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = all.words)
data <- raw.data %>%
mutate(word = tolower(gloss)) %>%
# remove incorrected word catches
filter(!(word %in% c("fat", "truck", "mother", "pick"))) %>%
mutate(type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = target_child_age,
child = as.character(target_child_id),
pair = substr(word, 1, 3)) %>%
filter(age < 60)
library(lme4)
library(Matrix)
install.packages("Matrix")
library(Matrix)
install.packages("lme4")
library(lme4)
sessionInfo()
model <- lme4::glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
install.packages("lme4", type = "source")
remotes::install_version("Matrix", version = "1.6.4")
model <- lme4::glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
library(lme4)
install.packages("lme4", type = "source")
model <- glmer(type ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
options(repos = c(CRAN = "https://cloud.r-project.org"))
utils::install.packages("Matrix")
utils::install.packages("lme4")
sessionInfo()
install.packages("Matrix")
updateR()
install.packages("installr")
installr::updateR()
#| results: hide
#| warning: false
#| message: false
# uncomment the following line if devtools not already installed
# install.packages("devtools")
# install the latest version of the package from github
devtools::install_github("langcog/childesr")
library(childesr)
# install other packages
library(tidyverse)
library(kableExtra)
get_corpora() %>%
kable(align = "l") %>%
scroll_box(height = "250px")
eng.corpora <- get_corpora() %>%
filter(collection_name == "Eng-NA")
eng.corpora %>%
kable(align = "l") %>%
scroll_box(height = "250px")
#| results: hide
#| warning: false
#| message: false
# uncomment the following line if devtools not already installed
# install.packages("devtools")
# install the latest version of the package from github
devtools::install_github("langcog/childesr")
library(childesr)
# install other packages
library(tidyverse)
library(kableExtra)
get_corpora() %>%
kable(align = "l") %>%
scroll_box(height = "250px")
eng.corpora <- get_corpora() %>%
filter(collection_name == "Eng-NA")
eng.corpora %>%
kable(align = "l") %>%
scroll_box(height = "250px")
transcript.count <- get_transcripts(collection = "Eng-NA") %>%
nrow()
child.count <- get_participants(role = "target_child",
collection = "Eng-NA") %>%
nrow()
naima.utterances <- get_utterances(collection = "Eng-NA",
corpus = "Providence",
target_child = "Naima")
naima.utterances %>%
slice_head(n = 1000) %>%
kable(align = "l") %>%
scroll_box(height = "250px")
eddie.utterances <- get_utterances(collection = "Eng-NA",
corpus = "Gleason",
target_child = "Eddie")
eddie.utterances %>%
slice_head(n = 1000) %>%
kable(align = "l") %>%
scroll_box(height = "250px")
get_speaker_statistics(corpus = c("Providence", "Gleason"),
target_child = c("Naima", "Eddie"),
role = "target_child") %>%
group_by(target_child_name, target_child_sex) %>%
summarize(Age = mean(target_child_age, na.rm = TRUE),
`Number of utterances` = mean(num_utterances, na.rm = TRUE),
`Length of utterances (in words)` = mean(mlu_w, na.rm = TRUE),
`Number of unique words` = mean(num_types, na.rm = TRUE)) %>%
kable(align = "l")
sample.word.frequencies <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = c("apple", "ball", "car", "dog", "egg"))
sample.word.frequencies %>%
kable(align = "l") %>%
scroll_box(height = "250px")
sample.word.frequencies <- sample.word.frequencies %>%
mutate(word = tolower(gloss)) %>%
filter(word %in% c("apple", "ball", "car", "dog", "egg"))
sample.word.frequencies %>%
group_by(word) %>%
summarize(frequency = n()) %>%
kable(align = "l") %>%
scroll_box(height = "250px")
#| fig-width: 10
#| fig-height: 7
sample.word.frequencies %>%
mutate(age = floor(target_child_age)) %>%
filter(age <= 48) %>%
group_by(word, age) %>%
summarize(frequency = n()) %>%
filter(frequency > 10) %>%
ggplot(aes(x = age, y = frequency, color = word)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Age (in months)", y = "Word frequency",
color = "Target word") +
theme_minimal()
# create list of child-directed words
c.words <- c("doggy", "birdy", "dolly", "horsy", "ducky",
"froggy", "piggy", "blanky", "mommy", "daddy")
# account for alternative spellings and plurals/possessives
c.extra.variations <- c(str_replace(c.words, "y", "ie"),
str_replace(c.words, "y", "ys"),
str_replace(c.words, "y", "ies"))
# create list of adult-directed words
a.words <- c("dog", "bird", "doll", "horse", "duck",
"frog", "pig", "blanket", "mom", "dad")
all.words <- c(c.words, c.extra.variations, a.words)
all.tokens <- sample.word.frequencies <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = c("apple", "ball", "car", "dog", "egg"))
raw.data <- get_tokens(collection = "Eng-NA",
role = "target_child",
token = all.words)
data <- raw.data %>%
mutate(word = tolower(gloss)) %>%
# remove incorrected word catches and reduce age range
dplyr::filter(!(word %in% c("fat", "truck", "mother", "pick")) &
target_child_age < 60) %>%
mutate(type = ifelse(word %in% a.words, "adult-directed", "child-directed"),
type_num = ifelse(type == "adult-directed", 1, 0),
age = scale(target_child_age),
child = as.character(target_child_id),
pair = substr(word, 1, 3),
# add quadratic age
age_2 = scale(target_child_age^2))
library(lme4)
library(marginaleffects)
library(ggeffects)
library(emmeans)
library(broom.mixed)
model <- glmer(type_num ~ age + (1|pair) + (1|child),
family = binomial(link = "logit"),
data = data)
model %>%
tidy(conf.int = TRUE) %>%
kable(align = "l")
ggpredict(model, terms = c("age [all]"), se = TRUE)
test <- ggpredict(model, terms = c("age [all]"), se = TRUE)
View(test)
ages <- select(data, target_child_age, age) %>%
rename(age = x)
ages <- select(data, target_child_age, age) %>%
rename(x = age)
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
left_join(ages, by = "x") %>%
ggplot(aes(x = target_child_age, y = predicted)) +
geom_line()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
left_join(ages, by = "x")
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
left_join(ages, by = "x")
test <- ggpredict(model, terms = c("age [all]"), se = TRUE)
View(ages)
ages <- select(data, target_child_age, age) %>%
rename(x = age) %>%
distinct()
ages <- select(data, target_child_age, age) %>%
distinct()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
rename(age = x) %>%
left_join(ages, by = "age") %>%
ggplot(aes(x = target_child_age, y = predicted)) +
geom_line()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
rename(age = x) %>%
left_join(ages, by = "age")
View(test)
View(test)
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
rename(age = x)
ages <- select(data, target_child_age, age) %>%
distinct()
ages <- select(data, target_child_age, age) %>%
mutate(age = age) %>%
distinct()
ages <- select(data, target_child_age, age) %>%
mutate(age = round(age, 4)) %>%
distinct()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
rename(age = round(x, 4)) %>%
left_join(ages, by = "age")
ages <- dplyr::select(data, target_child_age, age) %>%
mutate(age = round(age, 4)) %>%
distinct()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
rename(age = round(x, 4)) %>%
left_join(ages, by = "age")
test <- ggpredict(model, terms = c("age [all]"), se = TRUE)
View(test)
colnames(test)
ages <- dplyr::select(data, target_child_age, age) %>%
mutate(age = round(age, 4)) %>%
distinct()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
mutate(age = round(x, 4)) %>%
left_join(ages, by = "age")
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
mutate(age = round(x, 4))
ages <- dplyr::select(data, target_child_age, age) %>%
mutate(age = round(age, 4)) %>%
distinct()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
mutate(age = round(x, 4)) %>%
left_join(ages, by = "age")
View(test)
mean.age <- mean(data$age)
mean.age <- mean(data$target_child_age)
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
mutate(age = (x + mean.age) * sd.age)
mean.age <- mean(data$target_child_age)
sd.age <- sd(data$target_child_age)
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
mutate(age = (x + mean.age) * sd.age)
ggplot(aes(x = age, y = predicted)) +
geom_line()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
mutate(age = (x + mean.age) * sd.age) %>%
ggplot(aes(x = age, y = predicted)) +
geom_line()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x, y = predicted)) +
geom_line()
ggpredict(model, terms = c("age [all]"), se = TRUE)
test <- ggpredict(model, terms = c("age [all]"), se = TRUE)
View(test)
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x, y = predicted)) +
geom_line() +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high))
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x, y = predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
theme_minimal()
test <- ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x, y = predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
theme_minimal()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x, y = predicted)) +
geom_line(color = "blue") +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
theme_minimal()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x, y = predicted)) +
geom_line(color = "blue", size = 2) +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Age (in months, scaled)",  y = "Predicted probability of adult-directed word") +
theme_minimal()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x * sd.age + mean.age, y = predicted)) +
geom_line(color = "blue", size = 2) +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
labs(x = "Age (in months, scaled)",  y = "Predicted probability of adult-directed word") +
theme_minimal()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x * sd.age + mean.age, y = predicted)) +
geom_line(color = "blue", size = 2) +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(breaks = c(0, 12, 24, 36, 48)) +
labs(x = "Age (in months, scaled)",  y = "Predicted probability of adult-directed word") +
theme_minimal()
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x * sd.age + mean.age, y = predicted)) +
geom_line(color = "blue", size = 2) +
geom_ribbon(aes(ymin = predicted - conf.low, ymax = predicted + conf.high), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(limits = c(0, 60), breaks = c(0, 12, 24, 36, 48, 60)) +
labs(x = "Age (in months, scaled)",  y = "Predicted probability of adult-directed word") +
theme_minimal()
View(test)
test <- ggpredict(model, terms = c("age [all]"), se = TRUE)
ggpredict(model, terms = c("age [all]"), se = TRUE) %>%
ggplot(aes(x = x * sd.age + mean.age, y = predicted)) +
geom_line(color = "blue", size = 2) +
geom_ribbon(aes(ymin = predicted - std.error, ymax = predicted + std.error), fill = "blue", alpha = 0.25) +
coord_cartesian(ylim = c(0, 1)) +
scale_x_continuous(limits = c(0, 60), breaks = c(0, 12, 24, 36, 48, 60)) +
labs(x = "Age (in months, scaled)",  y = "Predicted probability of adult-directed word") +
theme_minimal()
report(model)
library(easystats)
report(model)
